const fs = require("fs");
const path = require("path");
const readline = require("readline");
const { SigningCosmWasmClient, CosmWasmClient } = require('@cosmjs/cosmwasm-stargate');
const { DirectSecp256k1HdWallet } = require('@cosmjs/proto-signing');
const { calculateFee, GasPrice } = require('@cosmjs/stargate');
const http = require('http');

const PORT = process.env.PORT || 3000;
// L·∫•y URL c·ªßa app t·ª´ Render dashboard
const APP_URL = 'https://oro-32z7.onrender.com';

// Ping m·ªói 10 ph√∫t ƒë·ªÉ kh√¥ng sleep
setInterval(async () => {
    try {
        const response = await fetch(APP_URL);
        console.log(`üèì Keep-alive: ${new Date().toLocaleString()}`);
    } catch (error) {
        console.log('‚ùå Ping failed:', error.message);
    }
}, 10 * 60 * 1000); // 10 ph√∫t
// T·∫°o HTTP server ƒë∆°n gi·∫£n
const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('OROSWAP BOT is running!');
});

server.listen(PORT, '0.0.0.0', () => {
    console.log(`Server running on port ${PORT}`);
});
console.clear();
console.log("\x1b[35m%s\x1b[0m", "============================================");
console.log("\x1b[36m%s\x1b[0m", "      OROSWAP BOT - V√ç KEPLR/LEAP       ");
console.log("\x1b[36m%s\x1b[0m", "               VELHUST                   ");
console.log("\x1b[35m%s\x1b[0m", "============================================\n");

const MNEMONIC = `
wealth option session shy tube chef traffic seed grow word crack almost
`.trim();

const CONFIG = {
    rpcEndpoint: "https://testnet-rpc.zigchain.com",
    chainId: "zig-test-2",
    zigDenom: "uzig",
    oroDenom: "coin.zig10rfjm85jmzfhravjwpq3hcdz8ngxg7lxd0drkr.uoro",
    swapContract: "zig15jqg0hmp9n06q0as7uk3x9xkwr9k3r7yh4ww2uc0hek8zlryrgmsamk4qg",
    gasPrice: GasPrice.fromString("0.025uzig"),
};

function getRandomAmount() {
    return parseFloat((Math.random() * (0.009 - 0.001) + 0.001).toFixed(3));
}

const ZIG_AMOUNT = getRandomAmount();
const ORO_AMOUNT = getRandomAmount();
const LIQ_ORO = getRandomAmount();

const delay = async (ms) => {
    process.stdout.write(`\r‚è≥ ƒêang ch·ªù ${ms / 1000} gi√¢y... `);
    await new Promise(res => setTimeout(res, ms));
    console.log("‚úÖ Ho√†n th√†nh ch·ªù");
};


async function getBalance(mnemonic, denom) {
    try {
        const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, { prefix: "zig" });
        const [account] = await wallet.getAccounts();
        const client = await CosmWasmClient.connect(CONFIG.rpcEndpoint);
        const balance = await client.getBalance(account.address, denom);
        return { address: account.address, amount: balance.amount, formatted: Number(balance.amount) / 1e6 };
    } catch (e) {
        throw new Error(`Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞: ${e.message}`);
    }
}

async function getBeliefPrice(denom, amount, retries = 3, delayMs = 90000) {
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const client = await CosmWasmClient.connect(CONFIG.rpcEndpoint);
            const sim = await client.queryContractSmart(CONFIG.swapContract, {
                simulation: {
                    offer_asset: {
                        amount,
                        info: { native_token: { denom: denom } }
                    }
                }
            });

            // Ki·ªÉm tra sim.return_amount c√≥ h·ª£p l·ªá kh√¥ng
            if (!sim.return_amount || BigInt(sim.return_amount) <= 0) {
                throw new Error("Gi√° tr·ªã return_amount kh√¥ng h·ª£p l·ªá ho·∫∑c b·∫±ng 0");
            }

            const beliefPrice = (BigInt(amount) * BigInt(1e6)) / BigInt(sim.return_amount);
            return (Number(beliefPrice) / 1e6).toFixed(18);
        } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói l·∫•y belief price (l·∫ßn ${attempt}/${retries}): ${e.message}`);
            if (attempt < retries) {
                console.log(`‚è≥ Th·ª≠ l·∫°i sau ${delayMs / 1000} gi√¢y...`);
                await new Promise(res => setTimeout(res, delayMs));
                continue;
            } else {
                console.error(`‚ùå Kh√¥ng th·ªÉ l·∫•y belief price sau ${retries} l·∫ßn th·ª≠: ${e.message}`);
                return null; // Tr·∫£ v·ªÅ null thay v√¨ throw ƒë·ªÉ kh√¥ng d·ª´ng ch∆∞∆°ng tr√¨nh
            }
        }
    }
}

async function getPoolRatio() {
    try {
        const client = await CosmWasmClient.connect(CONFIG.rpcEndpoint);
        const poolInfo = await client.queryContractSmart(CONFIG.swapContract, { pool: {} });

        // T√¨m t√†i s·∫£n ZIG v√† ORO
        const zigAsset = poolInfo.assets.find(asset => asset.info.native_token?.denom === CONFIG.zigDenom);
        const oroAsset = poolInfo.assets.find(asset => asset.info.native_token?.denom === CONFIG.oroDenom);

        // Ki·ªÉm tra xem t√†i s·∫£n c√≥ t·ªìn t·∫°i v√† c√≥ amount h·ª£p l·ªá kh√¥ng
        if (!zigAsset || !oroAsset || !zigAsset.amount || !oroAsset.amount) {
            throw new Error("Kh√¥ng t√¨m th·∫•y t√†i s·∫£n ZIG ho·∫∑c ORO trong pool ho·∫∑c amount kh√¥ng h·ª£p l·ªá");
        }

        const zigReserve = Number(zigAsset.amount) / 1e6;
        const oroReserve = Number(oroAsset.amount) / 1e6;

        // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
        if (isNaN(zigReserve) || isNaN(oroReserve) || zigReserve <= 0) {
            throw new Error("Gi√° tr·ªã reserve kh√¥ng h·ª£p l·ªá ho·∫∑c b·∫±ng 0");
        }

        const ratio = oroReserve / zigReserve; // T·ª∑ l·ªá ORO/ZIG
        console.log(`T t·ª∑ l·ªá pool hi·ªán t·∫°i: ${oroReserve} ORO / ${zigReserve} ZIG = ${ratio} ORO/ZIG`);
        return { zigReserve, oroReserve, ratio };
    } catch (e) {
        console.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin pool:", e.message);
        return null;
    }
}

async function swap(mnemonic, amount, fromDenom, toDenom) {
    try {
        const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, { prefix: "zig" });
        const [account] = await wallet.getAccounts();
        const client = await SigningCosmWasmClient.connectWithSigner(CONFIG.rpcEndpoint, wallet, {
            gasPrice: CONFIG.gasPrice, chainId: CONFIG.chainId
        });

        const baseAmount = Math.floor(amount * 1e6).toString();
        const beliefPrice = await getBeliefPrice(fromDenom, baseAmount);
        const fee = calculateFee(320000, CONFIG.gasPrice);

        const msg = {
            swap: {
                belief_price: beliefPrice,
                max_spread: "0.005",
                offer_asset: {
                    amount: baseAmount,
                    info: { native_token: { denom: fromDenom } }
                }
            }
        };

        const result = await client.execute(account.address, CONFIG.swapContract, msg, fee, "Swap", [
            { denom: fromDenom, amount: baseAmount }
        ]);

        const fromName = fromDenom === CONFIG.zigDenom ? "ZIG" : "ORO";
        const toName = toDenom === CONFIG.zigDenom ? "ZIG" : "ORO";
        console.log(`\n‚úÖ Swap ${fromName} ‚Üí ${toName} th√†nh c√¥ng! TX: ${result.transactionHash}`);
        console.log(`üîç https://zigscan.org/tx/${result.transactionHash}`);
    } catch (e) {
        console.error(`‚ùå Swap th·∫•t b·∫°i:`, e.message);
    }
}

async function addLiquidity(mnemonic, amountUoro, amountUzig) {
    try {
        const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, { prefix: "zig" });
        const [account] = await wallet.getAccounts();
        const client = await SigningCosmWasmClient.connectWithSigner(CONFIG.rpcEndpoint, wallet, {
            gasPrice: CONFIG.gasPrice, chainId: CONFIG.chainId
        });

        // Ki·ªÉm tra s·ªë d∆∞
        const zigBalance = await getBalance(MNEMONIC, CONFIG.zigDenom);
        const oroBalance = await getBalance(MNEMONIC, CONFIG.oroDenom);
        if (zigBalance.formatted < amountUzig || oroBalance.formatted < amountUoro) {
            throw new Error(`S·ªë d∆∞ kh√¥ng ƒë·ªß: C·∫ßn ${amountUzig} ZIG v√† ${amountUoro} ORO`);
        }

        // L·∫•y t·ª∑ l·ªá pool m·ªõi nh·∫•t
        const poolInfo = await getPoolRatio();
        if (!poolInfo) {
            throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin pool");
        }
        const { ratio } = poolInfo;

        // Ki·ªÉm tra t·ª∑ l·ªá h·ª£p l·ªá
        if (isNaN(ratio) || ratio <= 0) {
            throw new Error("T·ª∑ l·ªá pool kh√¥ng h·ª£p l·ªá");
        }

        const adjustedZig = amountUoro * ratio; // C·∫≠p nh·∫≠t l∆∞·ª£ng ZIG d·ª±a tr√™n t·ª∑ l·ªá m·ªõi nh·∫•t
        console.log(`Cung c·∫•p thanh kho·∫£n: ${amountUoro} ORO v√† ${adjustedZig.toFixed(6)} ZIG`);

        // Chuy·ªÉn ƒë·ªïi sang micro-unit
        const uoroAmount = Math.floor(amountUoro * 1e6).toString();
        const uzigAmount = Math.floor(adjustedZig * 1e6).toString();

        // Ki·ªÉm tra uzigAmount h·ª£p l·ªá
        if (isNaN(uzigAmount) || uzigAmount <= 0) {
            throw new Error("S·ªë l∆∞·ª£ng ZIG kh√¥ng h·ª£p l·ªá ƒë·ªÉ cung c·∫•p thanh kho·∫£n");
        }

        const msg = {
            provide_liquidity: {
                assets: [
                    {
                        amount: uoroAmount,
                        info: { native_token: { denom: CONFIG.oroDenom } }
                    },
                    {
                        amount: uzigAmount,
                        info: { native_token: { denom: CONFIG.zigDenom } }
                    }
                ],
                slippage_tolerance: "0.5" // TƒÉng l√™n 20% ƒë·ªÉ gi·∫£m l·ªói tr∆∞·ª£t gi√°
            }
        };

        const funds = [
            { denom: CONFIG.oroDenom, amount: uoroAmount },
            { denom: CONFIG.zigDenom, amount: uzigAmount }
        ];

        const fee = calculateFee(500000, CONFIG.gasPrice);

        const result = await client.execute(account.address, CONFIG.swapContract, msg, fee, "Swap", funds);

        console.log(`\n‚úÖ Cung c·∫•p thanh kho·∫£n c·∫∑p ORO/ZIG th√†nh c√¥ng! TX: ${result.transactionHash}`);
        console.log(`üîç https://zigscan.org/tx/${result.transactionHash}`);
    } catch (err) {
        console.error("‚ùå Th√™m thanh kho·∫£n th·∫•t b·∫°i:", err.message);
    }
}

async function runBot() {
    // Ki·ªÉm tra mnemonic h·ª£p l·ªá
    try {
        await DirectSecp256k1HdWallet.fromMnemonic(MNEMONIC, { prefix: "zig" });
    } catch (error) {
        console.error("\x1b[31m%s\x1b[0m", "‚ùå Mnemonic kh√¥ng h·ª£p l·ªá trong file phrase.txt: ", error.message);
        return;
    }    

    for (let liqCount = 0; liqCount < 1000000; liqCount++) {
        console.log(`\n=== Chu k·ª≥ Swap th·ª© ${liqCount + 1} ===`);
        // Swap ZIG -> ORO
        for (let i = 0; i < 10; i++) {
            await swap(MNEMONIC, ZIG_AMOUNT, CONFIG.zigDenom, CONFIG.oroDenom);
            await delay(90000);
        }

        // Swap ORO -> ZIG
        for (let i = 0; i < 10; i++) {
            await swap(MNEMONIC, ORO_AMOUNT, CONFIG.oroDenom, CONFIG.zigDenom);
            await delay(90000);
        }

        // // Th√™m thanh kho·∫£n
        // for (let i = 0; i < 5; i++) {
        //     console.log("\nüíß ƒêang th√™m thanh kho·∫£n...");
        //     const poolInfo = await getPoolRatio();
        //     if (poolInfo) {
        //         const { ratio } = poolInfo;
        //         const adjustedZig = LIQ_ORO * ratio; // T√≠nh l∆∞·ª£ng ZIG c·∫ßn d·ª±a tr√™n t·ª∑ l·ªá pool
        //         await addLiquidity(MNEMONIC, LIQ_ORO, adjustedZig);
        //         await delay(25000);
        //     } else {
        //         console.error("Kh√¥ng th·ªÉ th√™m thanh kho·∫£n do l·ªói l·∫•y t·ª∑ l·ªá pool.");
        //         return;
        //     }
        // }
    }

    console.log("\n‚úÖ Ho√†n th√†nh bot!");
}

runBot();